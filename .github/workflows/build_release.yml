name: Build and release

on: push

jobs:
  build:
    strategy:
      matrix:
        build-os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - build-os: ubuntu-latest
            archive-name: LEDControllerUpdater_linux.zip
            archive-cmd: |
                          chmod +x LEDControllerUpdater
                          zip LEDControllerUpdater_linux.zip LEDControllerUpdater
          - build-os: windows-latest
            archive-name: LEDControllerUpdater_windows.zip
            archive-cmd: powershell Compress-Archive LEDControllerUpdater.exe LEDControllerUpdater_windows.zip

          - build-os: macos-latest
            archive-name: LEDControllerUpdater_mac.zip
            archive-cmd: zip -r LEDControllerUpdater_mac.zip LEDControllerUpdater.app
                          
    runs-on: ${{ matrix.build-os }}

    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-go@v2
        with:
          go-version: 1.17.x

      - name: Get dependencies
        if: ${{ matrix.build-os == 'ubuntu-latest' }}
        run: sudo apt-get update && sudo apt-get install gcc libgl1-mesa-dev libegl1-mesa-dev libgles2-mesa-dev libx11-dev xorg-dev
      
      - name: Go build
        run: go build -ldflags="-w -s" .

      - name: Package (mac)
        if: ${{ matrix.build-os == 'macos-latest' }}
        run: |
              go install "fyne.io/fyne/v2/cmd/fyne@latest"
              fyne package --executable LEDControllerUpdater \
                           --appVersion $(grep "APP_VERSION" main.go |cut -d '"' -f 2 |tr -d 'v') \
                           --appID com.wingnuttech.LEDControllerUpdater
      
      - name: Compress
        run: ${{ matrix.archive-cmd }}
        
      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: build
          path: ${{ matrix.archive-name }}

  check_version:
    runs-on: ubuntu-latest
    steps:
      - name: Chackout
        uses: actions/checkout@v2

      - name: Check version
        run: |
              git fetch --tags
              file_ver=$(sed -n 's/^.*APP_VERSION .*"\(.*\)"$/\1/p' main.go)
              ch_ver=$(grep -oE -m1 "v[0-9]*\.[0-9]*\.[0-9]*" CHANGELOG.md)
              git_tags=$(git describe --tags --always $(git rev-list --tags))

              echo "Latest git tag:    ${git_tags%%$'\n'*}"
              echo "File version:      ${file_ver}"
              echo "Changelog version: ${ch_ver}"

              if [[ $file_ver != $ch_ver || $git_tags =~ $file_ver ]]; then echo "Version issue!"; exit 1; fi

  release:
    needs: [build, check_version]
    if: ${{ github.ref_name == 'main' }}
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - uses: actions/download-artifact@v2

      - name: Generate changelog
        run: awk '/^## / {if (p) {exit}; {p=1}} p' CHANGELOG.md > latest-CHANGELOG.md

      - name: Get version
        run: echo "version=$(sed -n 's/^.*APP_VERSION .*"\(.*\)"$/\1/p' main.go)" >> $GITHUB_ENV

      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.version }}
          body_path: latest-CHANGELOG.md
          files: build/*
